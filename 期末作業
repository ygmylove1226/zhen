{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7+IyIjBPhHVBggcJDOkLn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GPzcVaNQJsX7","executionInfo":{"status":"ok","timestamp":1686817423764,"user_tz":-480,"elapsed":6,"user":{"displayName":"陳庭蓁","userId":"09472940398376780250"}},"outputId":"066a6f08-a068-41df-81d9-935731b01054"},"outputs":[{"output_type":"stream","name":"stdout","text":["最便宜的旅遊路線： A -> E -> D -> C -> B -> F -> G\n","總花費： 48944.57613804574\n"]}],"source":["class City:\n","    def __init__(self, name, coordinate, accommodation_cost):\n","        self.name = name\n","        self.coordinate = coordinate\n","        self.accommodation_cost = accommodation_cost\n","\n","    def calculate_discounted_cost(self, previous_city):\n","        if previous_city is None:\n","            return self.accommodation_cost\n","\n","        if previous_city.name in ['C', 'G'] and self.name == 'A':\n","            return 0.8 * self.accommodation_cost\n","        elif previous_city.name in ['D', 'E'] and self.name == 'B':\n","            return 0.8 * self.accommodation_cost\n","        elif previous_city.name in ['A', 'C'] and self.name == 'F':\n","            return 0.8 * self.accommodation_cost\n","        elif previous_city.name in ['B', 'F'] and self.name == 'E':\n","            return 0.8 * self.accommodation_cost\n","        elif previous_city.name in ['E', 'F'] and self.name == 'G':\n","            return 0.8 * self.accommodation_cost\n","        elif previous_city.name in ['A', 'B'] and self.name == 'D':\n","            return 0.8 * self.accommodation_cost\n","        else:\n","            return self.accommodation_cost\n","\n","def calculate_distance(coordinate1, coordinate2):\n","    x1, y1 = coordinate1\n","    x2, y2 = coordinate2\n","    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n","\n","def find_cheapest_route(current_city, visited_cities, total_cost):\n","    if len(visited_cities) == 7:\n","        return total_cost, visited_cities\n","\n","    cheapest_cost = float('inf')\n","    cheapest_route = []\n","\n","    for city in [A, B, C, D, E, F, G]:\n","        if city not in visited_cities:\n","            distance = calculate_distance(current_city.coordinate, city.coordinate)\n","            accommodation_cost = city.calculate_discounted_cost(current_city)\n","            fuel_cost = distance * 100\n","            total_cost += accommodation_cost + fuel_cost\n","            cost, route = find_cheapest_route(city, visited_cities + [city], total_cost)\n","\n","            if cost < cheapest_cost:\n","                cheapest_cost = cost\n","                cheapest_route = route\n","\n","            total_cost -= accommodation_cost + fuel_cost\n","\n","    return cheapest_cost, cheapest_route\n","\n","A = City(\"A\", (0, 0), 2000)\n","B = City(\"B\", (0, 120), 2400)\n","C = City(\"C\", (30, 100), 2400)\n","D = City(\"D\", (80, 0), 1600)\n","E = City(\"E\", (45, 10), 1500)\n","F = City(\"F\", (90, 160), 2200)\n","G = City(\"G\", (120, 200), 1200)\n","\n","start_city = A\n","cheapest_cost, cheapest_route = find_cheapest_route(start_city, [start_city], 0)\n","\n","route_names = [city.name for city in cheapest_route]\n","route_string = \" -> \".join(route_names)\n","print(\"最便宜的旅遊路線：\", route_string)\n","print(\"總花費：\", cheapest_cost)\n"]}]}